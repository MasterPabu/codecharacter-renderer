/**
 * Imports
 *
 * Import the state and utilities protocol buffer
 * files generated by protoc on application start
 *
 * This requires the state.proto and utilities.proto
 * to be present in src/ipc/. The location will probably
 * change once we bring in the simulator. Update
 * package.json with the build instructions accordingly.
 */
var PBUtilities = require("./utilities_pb.js");
var PBState     = require("./state_pb.js");

module.exports = {
    startSimulator : startSimulator
}

/**
 * Executes the start script/command and reads from stdout of the child process
 * @param startCommand specifies the start script/command
 */
function startSimulator (startCommand) {
    var childProcess = require('child_process');
    var simulatorProcess = childProcess.exec(startCommand, function (error, stdout, stderr) {
        if(error){
            console.log(error.stack);
            console.log('Error code: '+error.code);
            console.log('Signal received: '+error.signal);
        }
        /**
         * This has to be changed to read data continuosly
         * Currently it just processes the data once
         */
        processData(stdout);
    });
    simulatorProcess.on('exit', function (code) {
        console.log('Child process exited with exit code '+code); 
    });
}

/**
 * Creates the state object from the raw binary to be passed to the renderer
 * @param rawData Binary data that is read from child process
 * @return stateObject
 */
function processData (rawData) {
    console.log('Processing Binary Data ...');
    console.log('Raw Binary Data : ' + rawData);
    /**
     * Logic for parsing goes here. This should
     * render the state object and return it.
     *
     * State object structure : 
     *
     * {
     *   "actors" : [
     *     "id"                   : 0,
     *     "attack"               : 0,
     *     "hp"                   : 0,
     *     "max_hp"               : 0,
     *     "max_speed"            : 0,
     *     "total_respawn_time"   : 0,
     *     "time_to_respawn"      : 0,
     *     "time_spent_near_base" : 0,
     *     "attack_target_id"     : 0,
     *     "los_radius"           : 0,
     *     "actor_type"           : 0,
     *   ],
     *   "tower_capture_log_entry" : [
     *     "tower_id"  : 0;
     *     "timestamp" : 0;
     *     "player_id" : 0;
     *   ]
     * }
     *
     * This does not cover many of the other state 
     * properties, such as the terrain and LoS information,
     * and also the actor type specific attributes
     * It is only for getting started with the rendereing logic
     * and not for actual parsing.
     *
     * The proto structure is also subject to 
     * change as it undergoes optimization.
     */
    console.log("Data Processed");
    return undefined;
}

